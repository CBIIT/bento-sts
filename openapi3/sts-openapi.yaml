openapi: 3.0.0
servers:
  - url: 'http://petstore.swagger.io/v2'
info:
  description: This is the API for metamodel database
  version: 1.0.0
  title: sts
  termsOfService: 'http://swagger.io/terms/'
  contact:
    email: mark.benson@nih.gov
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
tags:
  - name: model
    description: models in mdb
    externalDocs:
      description: Find out more
      url: 'http://swagger.io'
  - name: node
    description: nodes in mdb
  - name: property
    description: node properties
    externalDocs:
      description: Find out more about node properties
      url: 'http://swagger.io'
  - name: valueset
    description: value sets are controlled list of terms
  - name: term
    description: terms in mdb
paths:
  /models:
    get:
      tags:
        - model
      summary: List all models
      description: |
        Returns a collection of models
      operationId: getListOfModels
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Model'
            text/plain:
              schema:
                $ref: '#/components/schemas/Text'
      parameters: []
  '/models/{modelId}':
    get:
      tags:
        - model
      summary: find model by ID
      description: Returns a single model
      operationId: getModelById
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  model:
                    type: string
            text/plain:
              schema:
                $ref: '#/components/schemas/Text'
        '400':
          description: Invalid ID supplied
        '404':
          description: Model not found
      parameters:
        - name: modelId
          in: path
          required: true
          schema:
            type: string
  /nodes:
    get:
      tags:
        - node
      summary: 'List all nodes '
      description: Returns a collection of nodes
      operationId: getListOfNodes
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Node'
            text/plain:
              schema:
                $ref: '#/components/schemas/Text'
      parameters:
        - name: modelId
          in: query
          required: false
          schema:
            type: string
          description: |
            limit to nodes belonging to this model
  '/nodes/{nodeId}':
    get:
      summary: Find node by ID
      description: Returns a single node
      operationId: getNodeById
      parameters:
        - name: nodeId
          in: path
          description: ID of node to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Node'
            text/plain:
              schema:
                $ref: '#/components/schemas/Text'
        '400':
          description: Invalid ID supplied
        '404':
          description: Node not found
  /properties:
    get:
      tags:
        - property
      summary: List all properties
      description: |
        Returns a collection of properties
      operationId: getListOfProperties
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Property'
            text/plain:
              schema:
                $ref: '#/components/schemas/Text'
      parameters: []
  '/properties/{propertyId}':
    get:
      tags:
        - property
      summary: Get a property using ID
      description: Returns a single property
      operationId: getPropertyById
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Property'
            text/plain:
              schema:
                $ref: '#/components/schemas/Text'
        '400':
          description: Invalid ID supplied
        '404':
          description: Property not found
      parameters:
        - name: propertyId
          in: path
          required: true
          schema:
            type: string
          description: ID of property to return
  /terms:
    get:
      tags:
        - term
      summary: List all terms
      description: Returns a collection of terms
      operationId: getListOfTerms
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Term'
            text/plain:
              schema:
                $ref: '#/components/schemas/Text'
      parameters: []
  '/terms/{termId}':
    get:
      tags:
        - term
      summary: Get a property using ID
      description: Returns a single property
      operationId: getTermyById
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                  value:
                    type: string
                  origin_definition:
                    type: string
                  origin_id:
                    type: string
            text/plain:
              schema:
                $ref: '#/components/schemas/Text'
        '400':
          description: Invalid ID supplied
        '404':
          description: Term not found
      parameters:
        - name: termId
          in: path
          required: true
          schema:
            type: string
          description: ID of term to return
  '/valuesets/{valuesetId}':
    get:
      tags:
        - valueset
      summary: Get a value set using ID
      description: Returns a single value set
      operationId: getValueSetById
      responses:
        '200':
          description: successful operation
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/Term'
            application/json:
              schema: {}
        '400':
          description: Invalid ID supplied
        '404':
          description: Value set not found
      parameters:
        - name: valuesetId
          in: path
          required: true
          schema:
            type: string
          description: ID of value set to return
  /valuesets:
    get:
      summary: List all Value Sets
      description: Returns a collection of value sets
      parameters: []
      operationId: getListOfValueSets
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValueSet'
            text/plain:
              schema:
                $ref: '#/components/schemas/Text'
      tags:
        - valueset
externalDocs:
  description: See github.com/CBIIT/bento-sts
  url: 'https://github.com/CBIIT/bento-sts/blob/master/README.md'
components:
  schemas:
    Model:
      type: object
      properties:
        model:
          type: string
    Property:
      type: object
      properties:
        id:
          type: string
        handle:
          type: string
        value_domain:
          type: string
        model:
          type: string
        is_required:
          type: auto
    Term:
      type: object
      properties:
        id:
          type: string
        value:
          type: string
        origin_definition:
          type: string
        origin_id:
          type: string
    Node:
      type: object
      properties:
        id:
          type: string
        handle:
          type: string
        model:
          type: string
    ApiResponse:
      type: object
    ValueSet:
      type: object
      properties:
        id:
          type: string
        url:
          type: string
    Text:
      type: string
  requestBodies:
    Pet:
      content:
        application/json:
          schema:
            type: object
            required:
              - name
              - photoUrls
            properties:
              id:
                type: integer
                format: int64
              category:
                type: object
                properties:
                  id:
                    type: integer
                    format: int64
                  name:
                    type: string
                xml:
                  name: Category
              name:
                type: string
                example: doggie
              photoUrls:
                type: array
                xml:
                  name: photoUrl
                  wrapped: true
                items:
                  type: string
              tags:
                type: array
                xml:
                  name: tag
                  wrapped: true
                items:
                  type: object
                  properties:
                    id:
                      type: integer
                      format: int64
                    name:
                      type: string
                  xml:
                    name: Tag
              status:
                type: string
                description: pet status in the store
                enum:
                  - available
                  - pending
                  - sold
            xml:
              name: Pet
        application/xml:
          schema:
            type: object
            required:
              - name
              - photoUrls
            properties:
              id:
                type: integer
                format: int64
              category:
                type: object
                properties:
                  id:
                    type: integer
                    format: int64
                  name:
                    type: string
                xml:
                  name: Category
              name:
                type: string
                example: doggie
              photoUrls:
                type: array
                xml:
                  name: photoUrl
                  wrapped: true
                items:
                  type: string
              tags:
                type: array
                xml:
                  name: tag
                  wrapped: true
                items:
                  type: object
                  properties:
                    id:
                      type: integer
                      format: int64
                    name:
                      type: string
                  xml:
                    name: Tag
              status:
                type: string
                description: pet status in the store
                enum:
                  - available
                  - pending
                  - sold
            xml:
              name: Pet
      description: Pet object that needs to be added to the store
      required: true
    UserArray:
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/User'
      description: List of user object
      required: true
  securitySchemes:
    petstore_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: 'http://petstore.swagger.io/oauth/dialog'
          scopes:
            'write:pets': modify pets in your account
            'read:pets': read your pets
    api_key:
      type: apiKey
      name: api_key
      in: header
  links: {}
  callbacks: {}
security: []
