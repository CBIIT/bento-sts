=begin comment

sts

This is the API for metamodel database

The version of the OpenAPI document: 1.0.0
Contact: mark.benson@nih.gov
Generated by: https://openapi-generator.tech

=end comment

=cut

#
# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
# Do not edit the class manually.
# Ref: https://openapi-generator.tech
#
package WWW::OpenAPIClient::PropertyApi;

require 5.6.0;
use strict;
use warnings;
use utf8; 
use Exporter;
use Carp qw( croak );
use Log::Any qw($log);

use WWW::OpenAPIClient::ApiClient;

use base "Class::Data::Inheritable";

__PACKAGE__->mk_classdata('method_documentation' => {});

sub new {
    my $class = shift;
    my $api_client;

    if ($_[0] && ref $_[0] && ref $_[0] eq 'WWW::OpenAPIClient::ApiClient' ) {
        $api_client = $_[0];
    } else {
        $api_client = WWW::OpenAPIClient::ApiClient->new(@_);
    }

    bless { api_client => $api_client }, $class;

}


#
# get_list_of_properties
#
# List all properties
# 
{
    my $params = {
    };
    __PACKAGE__->method_documentation->{ 'get_list_of_properties' } = { 
        summary => 'List all properties',
        params => $params,
        returns => 'Property',
        };
}
# @return Property
#
sub get_list_of_properties {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/properties';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('Property', $response);
    return $_response_object;
}

#
# get_property_by_id
#
# Get a property using ID
# 
# @param string $property_id ID of property to return (required)
{
    my $params = {
    'property_id' => {
        data_type => 'string',
        description => 'ID of property to return',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_property_by_id' } = { 
        summary => 'Get a property using ID',
        params => $params,
        returns => 'Property',
        };
}
# @return Property
#
sub get_property_by_id {
    my ($self, %args) = @_;

    # verify the required parameter 'property_id' is set
    unless (exists $args{'property_id'}) {
      croak("Missing the required parameter 'property_id' when calling get_property_by_id");
    }

    # parse inputs
    my $_resource_path = '/properties/{propertyId}';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'property_id'}) {
        my $_base_variable = "{" . "propertyId" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'property_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('Property', $response);
    return $_response_object;
}

1;
