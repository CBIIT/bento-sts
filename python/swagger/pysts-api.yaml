swagger: "2.0"
info:
  title: Simple Terminology Server API
  description: >-
    The Simple Terminology Server (STS) exposes elements of data models in
    an intuitive, consistent way. Data models expressed in the form of a
    [property graph](https://en.wikipedia.org/wiki/Graph_database#Labeled-property_graph) -- i.e., as nodes, relationships, properties, and terms -- can be
    explored and queried via this interface. Data models are stored in an
    instance of a [Metamodel Database (MDB)](https://github.com/CBIIT/bento-meta)
    backed by a [Neo4j](https://neo4j.com) server.
  version: "1.0.0"
  contact:
    email: mark.jensen@nih.gov
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
host: sts.ctos-data-team.org
#host: localhost:5000
schemes:
#  - "http"
  - "https"
basePath: "/v1"
tags:
  - name: "models"
    description: |
      Available models
    externalDocs:
      description: Explore on UI
      url: "https://sts.ctos-data-team.org"
  - name: "model"
    description: |
      Nodes, properties, and value sets of terms for a specific model
    externalDocs:
      description: Explore on UI
      url: "https://sts.ctos-data-team.org"
  - name: "tags"
    description: |
      Metainformation in MDB tags
    externalDocs:
      description: Explore on UI
      url: "https://sts.ctos-data-team.org"
  - name: "tag"
    description: |
      Tag values and tagged entity retrieval
    externalDocs:
      description: Explore on UI
      url: "https://sts.ctos-data-team.org"
  - name: "term"
    description: |
      Term entities by their string representation (a.k.a. 'value')
    externalDocs:
      description: Explore on UI
      url: "https://sts.ctos-data-team.org"
  - name: "id"
    description: |
      Retrieve a single entity by its nanoid
    externalDocs:
      description: Explore on UI
      url: "https://sts.ctos-data-team.org"
paths:
  /models:
    get:
      tags:
        - models
      summary: Get info on available models
      produces:
        - application/json
      responses:
        "200":
          description: "success"
          schema:
            type: object
            properties:
              count:
                type: integer
              models:
                type: array
                items:
                  $ref: "#/definitions/Model"
  /models/count:
    get:
      tags:
        - models
      summary: Get number of available models
      produces:
        - application/json
      responses:
        "200":
          description: Count of models
          schema:
            type: object
            properties:
              count:
                type: integer
  /model/{modelHandle}/nodes:
    get:
      tags:
        - model
      summary: Get all nodes for specified model
      parameters:
        - name: modelHandle
          in: path
          required: true
          description: |
            Handle (\'name\') of model (use /models to find available handles)
          type: string
        - name: skip
          in: query
          description: |
            Pagination - number of items to skip
          type: integer
        - name: limit
          in: query
          description: |
            Pagination - number of items to return
          type: integer
      produces:
        - application/json
      responses:
        "200":
          description: success
          schema:
            type: object
            properties:
              count:
                type: integer
              nodes:
                type: array
                items:
                  $ref: "#/definitions/Node"
        "404":
          description: Model not found
  /model/{modelHandle}/nodes/count:
    get:
      tags:
        - model
      summary: Get number of nodes for specified model
      parameters:
        - name: modelHandle
          in: path
          required: true
          description: |
            Handle (\'name\') of model (use /models to find available handles)
          type: string
      produces:
        - application/json
      responses:
        "200":
          description: Count of nodes
          schema:
            type: object
            properties:
              count:
                type: integer
        "404":
          description: Model not found
  /model/{modelHandle}/node/{nodeHandle}:
    get:
      tags:
        - model
      summary: Retrieve a specified node from a model
      parameters:
        - name: modelHandle
          in: path
          required: true
          description: |
            Handle (\'name\') of model (use /models to find available handles)
          type: string
        - name: nodeHandle
          in: path
          required: true
          description: |
            Handle (\'name\') of node (use /model/{modelHandle}/nodes to find
            available nodes
          type: string
      produces:
        - application/json
      responses:
        "200":
          description: Requested node
          schema:
            $ref: "#/definitions/Node"
        "404":
          description: Item not found
  /model/{modelHandle}/node/{nodeHandle}/properties:
    get:
      tags:
        - model
      summary: Get all properties for specified node
      parameters:
        - name: modelHandle
          in: path
          required: true
          description: |
            Handle (\'name\') of model (use /models to find available handles)
          type: string
        - name: nodeHandle
          in: path
          required: true
          description: |
            Handle (\'name\') of node (use /model/{modelHandle}/nodes to find
            available nodes
          type: string
        - name: skip
          in: query
          description: |
            Pagination - number of items to skip
          type: integer
        - name: limit
          in: query
          description: |
            Pagination - number of items to return
          type: integer
      produces:
        - application/json
      responses:
        "200":
          description: success
          schema:
            type: object
            properties:
              count:
                type: integer
              properties:
                type: array
                items:
                  $ref: "#/definitions/Property"
        "404":
          description: Item not found
  /model/{modelHandle}/node/{nodeHandle}/properties/count:
    get:
      tags:
        - model
      summary: Get number of  properties for specified node
      parameters:
        - name: modelHandle
          in: path
          required: true
          description: |
            Handle (\'name\') of model (use /models to find available handles)
          type: string
        - name: nodeHandle
          in: path
          required: true
          description: |
            Handle (\'name\') of node (use /model/{modelHandle}/nodes to find
            available nodes
          type: string
      produces:
        - application/json
      responses:
        "200":
          description: Count of properties for node
          schema:
            type: object
            properties:
              count:
                type: integer
        "404":
          description: Item not found
  /model/{modelHandle}/node/{nodeHandle}/property/{propHandle}:
    get:
      tags:
        - model
      summary: Retrieve a specified property from a model
      parameters:
        - name: modelHandle
          in: path
          required: true
          description: |
            Handle (\'name\') of model (use /models to find available handles)
          type: string
        - name: nodeHandle
          in: path
          required: true
          description: |
            Handle (\'name\') of node (use /model/{modelHandle}/nodes to find
            available nodes
          type: string
        - name: propHandle
          in: path
          required: true
          description: |
            Handle (\'name\') of property (use
            /model/{modelHandle}/node/{nodeHandle}/properties
            to find available properties
          type: string
      produces:
        - application/json
      responses:
        "200":
          description: Requested property
          schema:
            $ref: "#/definitions/Property"
        "404":
          description: Item not found
  /model/{modelHandle}/node/{nodeHandle}/property/{propHandle}/terms:
    get:
      tags:
        - model
      summary: |
        Get the terms (acceptable values) for specified property,
        if applicable to property
      parameters:
        - name: modelHandle
          in: path
          required: true
          description: |
            Handle (\'name\') of model (use /models to find available handles)
          type: string
        - name: nodeHandle
          in: path
          required: true
          description: |
            Handle (\'name\') of node (use /model/{modelHandle}/nodes to find
            available nodes
          type: string
        - name: propHandle
          in: path
          required: true
          description: |
            Handle (\'name\') of property (use
            /model/{modelHandle}/node/{nodeHandle}/properties
            to find available properties
          type: string
        - name: skip
          in: query
          description: |
            Pagination - number of items to skip
          type: integer
        - name: limit
          in: query
          description: |
            Pagination - number of items to return
          type: integer
      produces:
        - application/json
      responses:
        "200":
          description: success
          schema:
            type: object
            properties:
              count:
                type: integer
              terms:
                type: array
                items:
                  $ref: "#/definitions/Term"
        "204":
          description: |
            Property exists, but does not use an acceptable value set.
            (No Content)
        "404":
          description: Item not found
  /model/{modelHandle}/node/{nodeHandle}/property/{propHandle}/terms/count:
    get:
      tags:
        - model
      summary: Get number of  properties for specified node
      parameters:
        - name: modelHandle
          in: path
          required: true
          description: |
            Handle (\'name\') of model (use /models to find available handles)
          type: string
        - name: nodeHandle
          in: path
          required: true
          description: |
            Handle (\'name\') of node (use /model/{modelHandle}/nodes to find
            available nodes
          type: string
        - name: propHandle
          in: path
          required: true
          description: |
            Handle (\'name\') of property (use
            /model/{modelHandle}/node/{nodeHandle}/properties
            to find available properties
          type: string
      produces:
        - application/json
      responses:
        "200":
          description: |
            Count of terms in property\'s acceptable value set
          schema:
            type: object
            properties:
              count:
                type: integer
        "204":
          description: |
            Property exists, but does not use an acceptable value set.
            (No Content)
        "404":
          description: Item not found
  /model/{modelHandle}/node/{nodeHandle}/property/{propHandle}/term/{termValue}:
    get:
      tags:
        - model
      summary: |
        Retrieve a specified term from a property\'s acceptable value set
      parameters:
        - name: modelHandle
          in: path
          required: true
          description: |
            Handle (\'name\') of model (use /models to find available handles)
          type: string
        - name: nodeHandle
          in: path
          required: true
          description: |
            Handle (\'name\') of node (use /model/{modelHandle}/nodes to find
            available nodes
          type: string
        - name: propHandle
          in: path
          required: true
          description: |
            Handle (\'name\') of property (use
            /model/{modelHandle}/node/{nodeHandle}/properties
            to find available properties
          type: string
        - name: termValue
          in: path
          required: true
          description: |
            String representation (\'value\') of the term (use
            /model/{modelHandle}/node/{nodeHandle}/property/{propHandle}/terms
            to find available terms
          type: string
      produces:
        - application/json
      responses:
        "200":
          description: Requested term(s)
          schema:
            type: object
            properties:
              term:
                type: array
                items:
                  $ref: "#/definitions/Term"
        "204":
          description: |
            Property exists, but does not use an acceptable value set.
            (No Content)
        "404":
          description: Item not found

  /tags:
    get:
      tags:
        - tags
      summary: Get all tag nodes in MDB
      produces:
        - application/json
      responses:
        "200":
          description: success
          schema:
            type: object
            properties:
              count:
                type: integer
              tags:
                type: array
                items:
                  $ref: "#/definitions/Tag"
        "404":
          description: No tags found
  /tags/count:
    get:
      tags:
        - tags
      summary: Get number of tags present in MDB
      produces:
        - application/json
      responses:
        "200":
          description: success
          schema:
            type: object
            properties:
              count:
                type: integer
        "404":
          description: No tags found
  /tag/{key}/values:
    get:
      tags:
        - tag
      summary: Get list of tags having specified tag key
      produces:
        - application/json
      parameters:
        - name: key
          in: path
          required: true
          description: Tag node key (string)
          type: string
      responses:
        "200":
          description: >-
            \<value\>\:\<count of tagged entities\> for each value under specified key

          schema:
            type: object
            properties:
              count:
                type: integer
              key:
                type: string
              values:
                type: array
                items:
                  type: object
        "404":
          description: No tag with specified key found
  /tag/{key}/{value}/entities:
    get:
      tags:
        - tag
      summary: Get list of entities tagged by key:value
      produces:
        - application/json
      parameters:
        - name: key
          in: path
          required: true
          description: Tag node key (string)
          type: string
        - name: value
          in: path
          required: true
          description: Tag node value (string)
          type: string
      responses:
        "200":
          description: List of model entities tagged by specified tag
          schema:
            type: object
            properties:
              count:
                type: integer
              entities:
                type: array
                items:
                  $ref: "#/definitions/Entity"
        "404":
          description: No tag with specified key:value found
  /tag/{key}/{value}/entities/count:
    get:
      tags:
        - tag
      summary: Get number of entities tagged by key:value
      produces:
        - application/json
      parameters:
        - name: key
          in: path
          required: true
          description: Tag node key (string)
          type: string
        - name: value
          in: path
          required: true
          description: Tag node value (string)
          type: string
        - name: skip
          in: query
          description: |
            Pagination - number of items to skip
          type: integer
        - name: limit
          in: query
          description: |
            Pagination - number of items to return
          type: integer
      responses:
        "200":
          description: Count of entities tagged by key:value
          schema:
            type: object
            properties:
              count:
                type: integer
        "404":
          description: No tag with specified key:value found
  /id/{id}:
    get:
      tags:
        - id
      summary: Get MDB entity with specified nanoid
      parameters:
        - name: id
          in: path
          required: true
          description: Nanoid (6 character unique string)
          type: string
      produces:
        - application/json
      responses:
        "200":
          description: MDB entity
          schema:
            $ref: "#/definitions/Entity"
        "404":
          description: No entity with specified nanoid
definitions:
  Entity:
    type: object
    properties:
      label:
        type: string
      nanoid:
        type: string
    required:
      - label
      - nanoid
  Model:
    type: object
    properties:
      handle:
        type: string
      name:
        type: string
      repository:
        type: string
      nanoid:
        type: string
    required:
      - handle
      - nanoid
  Node:
    type: object
    properties:
      handle:
        type: string
      model:
        type: string
      nanoid:
        type: string
    required:
      - handle
      - model
      - nanoid
  Property:
    type: object
    properties:
      handle:
        type: string
      model:
        type: string
      nanoid:
        type: string
      is_required:
        type: string
      value_domain:
        type: string
      units:
        type: string
      pattern:
        type: string
    required:
      - handle
      - model
      - nanoid
      - value_domain
  Term:
    type: object
    properties:
      value:
        type: string
      origin_name:
        type: string
      nanoid:
        type: string
      origin_id:
        type: string
      origin_definition:
        type: string
    required:
      - value
      - origin_name
      - nanoid
  Tag:
    type: object
    properties:
      key:
        type: string
      value:
        type: string
      nanoid:
        type: string
    required:
      - key
      - value
      - nanoid
