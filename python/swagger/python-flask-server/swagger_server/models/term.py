# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class Term(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, value: str=None, origin_name: str=None, nanoid: str=None, origin_id: str=None, origin_definition: str=None):  # noqa: E501
        """Term - a model defined in Swagger

        :param value: The value of this Term.  # noqa: E501
        :type value: str
        :param origin_name: The origin_name of this Term.  # noqa: E501
        :type origin_name: str
        :param nanoid: The nanoid of this Term.  # noqa: E501
        :type nanoid: str
        :param origin_id: The origin_id of this Term.  # noqa: E501
        :type origin_id: str
        :param origin_definition: The origin_definition of this Term.  # noqa: E501
        :type origin_definition: str
        """
        self.swagger_types = {
            'value': str,
            'origin_name': str,
            'nanoid': str,
            'origin_id': str,
            'origin_definition': str
        }

        self.attribute_map = {
            'value': 'value',
            'origin_name': 'origin_name',
            'nanoid': 'nanoid',
            'origin_id': 'origin_id',
            'origin_definition': 'origin_definition'
        }

        self._value = value
        self._origin_name = origin_name
        self._nanoid = nanoid
        self._origin_id = origin_id
        self._origin_definition = origin_definition

    @classmethod
    def from_dict(cls, dikt) -> 'Term':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Term of this Term.  # noqa: E501
        :rtype: Term
        """
        return util.deserialize_model(dikt, cls)

    @property
    def value(self) -> str:
        """Gets the value of this Term.


        :return: The value of this Term.
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value: str):
        """Sets the value of this Term.


        :param value: The value of this Term.
        :type value: str
        """
        if value is None:
            raise ValueError("Invalid value for `value`, must not be `None`")  # noqa: E501

        self._value = value

    @property
    def origin_name(self) -> str:
        """Gets the origin_name of this Term.


        :return: The origin_name of this Term.
        :rtype: str
        """
        return self._origin_name

    @origin_name.setter
    def origin_name(self, origin_name: str):
        """Sets the origin_name of this Term.


        :param origin_name: The origin_name of this Term.
        :type origin_name: str
        """
        if origin_name is None:
            raise ValueError("Invalid value for `origin_name`, must not be `None`")  # noqa: E501

        self._origin_name = origin_name

    @property
    def nanoid(self) -> str:
        """Gets the nanoid of this Term.


        :return: The nanoid of this Term.
        :rtype: str
        """
        return self._nanoid

    @nanoid.setter
    def nanoid(self, nanoid: str):
        """Sets the nanoid of this Term.


        :param nanoid: The nanoid of this Term.
        :type nanoid: str
        """
        if nanoid is None:
            raise ValueError("Invalid value for `nanoid`, must not be `None`")  # noqa: E501

        self._nanoid = nanoid

    @property
    def origin_id(self) -> str:
        """Gets the origin_id of this Term.


        :return: The origin_id of this Term.
        :rtype: str
        """
        return self._origin_id

    @origin_id.setter
    def origin_id(self, origin_id: str):
        """Sets the origin_id of this Term.


        :param origin_id: The origin_id of this Term.
        :type origin_id: str
        """

        self._origin_id = origin_id

    @property
    def origin_definition(self) -> str:
        """Gets the origin_definition of this Term.


        :return: The origin_definition of this Term.
        :rtype: str
        """
        return self._origin_definition

    @origin_definition.setter
    def origin_definition(self, origin_definition: str):
        """Sets the origin_definition of this Term.


        :param origin_definition: The origin_definition of this Term.
        :type origin_definition: str
        """

        self._origin_definition = origin_definition
