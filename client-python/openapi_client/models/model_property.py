# coding: utf-8

"""
    sts

    This is the API for metamodel database  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Contact: mark.benson@nih.gov
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class ModelProperty(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        'handle': 'str',
        'value_domain': 'str',
        'model': 'str',
        'is_required': 'Auto'
    }

    attribute_map = {
        'id': 'id',
        'handle': 'handle',
        'value_domain': 'value_domain',
        'model': 'model',
        'is_required': 'is_required'
    }

    def __init__(self, id=None, handle=None, value_domain=None, model=None, is_required=None, local_vars_configuration=None):  # noqa: E501
        """ModelProperty - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._handle = None
        self._value_domain = None
        self._model = None
        self._is_required = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if handle is not None:
            self.handle = handle
        if value_domain is not None:
            self.value_domain = value_domain
        if model is not None:
            self.model = model
        if is_required is not None:
            self.is_required = is_required

    @property
    def id(self):
        """Gets the id of this ModelProperty.  # noqa: E501


        :return: The id of this ModelProperty.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ModelProperty.


        :param id: The id of this ModelProperty.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def handle(self):
        """Gets the handle of this ModelProperty.  # noqa: E501


        :return: The handle of this ModelProperty.  # noqa: E501
        :rtype: str
        """
        return self._handle

    @handle.setter
    def handle(self, handle):
        """Sets the handle of this ModelProperty.


        :param handle: The handle of this ModelProperty.  # noqa: E501
        :type: str
        """

        self._handle = handle

    @property
    def value_domain(self):
        """Gets the value_domain of this ModelProperty.  # noqa: E501


        :return: The value_domain of this ModelProperty.  # noqa: E501
        :rtype: str
        """
        return self._value_domain

    @value_domain.setter
    def value_domain(self, value_domain):
        """Sets the value_domain of this ModelProperty.


        :param value_domain: The value_domain of this ModelProperty.  # noqa: E501
        :type: str
        """

        self._value_domain = value_domain

    @property
    def model(self):
        """Gets the model of this ModelProperty.  # noqa: E501


        :return: The model of this ModelProperty.  # noqa: E501
        :rtype: str
        """
        return self._model

    @model.setter
    def model(self, model):
        """Sets the model of this ModelProperty.


        :param model: The model of this ModelProperty.  # noqa: E501
        :type: str
        """

        self._model = model

    @property
    def is_required(self):
        """Gets the is_required of this ModelProperty.  # noqa: E501


        :return: The is_required of this ModelProperty.  # noqa: E501
        :rtype: Auto
        """
        return self._is_required

    @is_required.setter
    def is_required(self, is_required):
        """Sets the is_required of this ModelProperty.


        :param is_required: The is_required of this ModelProperty.  # noqa: E501
        :type: Auto
        """

        self._is_required = is_required

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ModelProperty):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ModelProperty):
            return True

        return self.to_dict() != other.to_dict()
